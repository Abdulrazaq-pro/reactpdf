import React, { useState, useEffect, useRef } from "react";
import { Document, Page, pdfjs } from "react-pdf";
import "react-pdf/dist/Page/AnnotationLayer.css";
import { gsap } from "gsap";
import {
  Menu,
  X,
  FileUp,
  ZoomIn,
  ZoomOut,
  ChevronLeft,
  ChevronRight,
  Plus,
  Trash2,
  MessageSquare,
  PaintBucket,
} from "lucide-react";

pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

const PdfAnnotator = () => {
  const [file, setFile] = useState(null);
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [scale, setScale] = useState(1.0);
  const [highlights, setHighlights] = useState([]);
  const [selectedColor, setSelectedColor] = useState("#FF6B6B");
  const [isHighlighting, setIsHighlighting] = useState(false);
  const [comments, setComments] = useState([]);
  const [documentId, setDocumentId] = useState(null);
  const [isSidebarOpen, setSidebarOpen] = useState(true);

  const containerRef = useRef(null);
  const sidebarRef = useRef(null);
  const overlayRef = useRef(null);


  const generateDocumentId = async (file) => {
    const buffer = await file.arrayBuffer();
    const hashBuffer = await crypto.subtle.digest("SHA-256", buffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
  };

  const loadStoredAnnotations = (docId) => {
    const stored = localStorage.getItem(`pdf-annotations-${docId}`);
    if (stored) {
      const { highlights: storedHighlights, comments: storedComments } =
        JSON.parse(stored);
      setHighlights(storedHighlights);
      setComments(storedComments);
    } else {
      setHighlights([]);
      setComments([]);
    }
  };

  const saveAnnotations = (highlights, comments) => {
    if (!documentId) return;
    const annotations = { highlights, comments };
    localStorage.setItem(
      `pdf-annotations-${documentId}`,
      JSON.stringify(annotations)
    );
  };

  const deleteHighlight = (highlightId) => {
    const updatedHighlights = highlights.filter((h) => h.id !== highlightId);
    const updatedComments = comments.filter(
      (c) => c.highlightId !== highlightId
    );
    setHighlights(updatedHighlights);
    setComments(updatedComments);
    saveAnnotations(updatedHighlights, updatedComments);

    // Add delete animation
    gsap.to(`[data-highlight="${highlightId}"]`, {
      opacity: 0,
      scale: 0.95,
      duration: 0.3,
      ease: "power2.out",
      onComplete: () => {
        gsap.set(`[data-highlight="${highlightId}"]`, { display: "none" });
      },
    });
  };

  const addComment = (highlightId) => {
    const newComment = {
      id: Date.now(),
      highlightId,
      text: "",
      timestamp: new Date().toISOString(),
    };
    const updatedComments = [...comments, newComment];
    setComments(updatedComments);
    saveAnnotations(highlights, updatedComments);

    // Add animation for new comment
    gsap.from(`[data-comment="${newComment.id}"]`, {
      height: 0,
      opacity: 0,
      duration: 0.3,
      ease: "power2.out",
    });
  };

  const updateComment = (commentId, text) => {
    const updatedComments = comments.map((comment) =>
      comment.id === commentId ? { ...comment, text } : comment
    );
    setComments(updatedComments);
    saveAnnotations(highlights, updatedComments);
  };
  const highlightColors = [
    { name: "Coral", value: "#FF6B6B" },
    { name: "Mint", value: "#4ECDC4" },
    { name: "Lavender", value: "#9B89B3" },
    { name: "Sunshine", value: "#FFD93D" },
    { name: "Peach", value: "#FF8B94" },
  ];

  useEffect(() => {
    // Initialize GSAP animations
    gsap.set(sidebarRef.current, {
      x: window.innerWidth < 768 ? "100%" : 0,
    });
  }, []);

  const toggleSidebar = () => {
    const isSmallScreen = window.innerWidth < 768;

    gsap.to(sidebarRef.current, {
      x: isSidebarOpen ? (isSmallScreen ? "100%" : "400px") : 0,
      duration: 0.5,
      ease: "power3.inOut",
    });

    if (isSmallScreen) {
      gsap.to(overlayRef.current, {
        opacity: isSidebarOpen ? 0 : 0.5,
        duration: 0.3,
        display: isSidebarOpen ? "none" : "block",
      });
    }

    setSidebarOpen(!isSidebarOpen);
  };

  // File handling functions
  const handleFileChange = async (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile && selectedFile.type === "application/pdf") {
      const newDocumentId = await generateDocumentId(selectedFile);
      setDocumentId(newDocumentId);
      loadStoredAnnotations(newDocumentId);
      setFile(selectedFile);

      // Animate file load
      gsap.from(".pdf-container", {
        opacity: 0,
        y: 20,
        duration: 0.5,
        ease: "power2.out",
      });
    }
  };

  // Selection and highlight handling
  const handleTextSelection = async () => {
    if (!isHighlighting) return;

    const selection = window.getSelection();
    const selectedText = selection.toString().trim();

    if (selectedText) {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();

      // Create new highlight with animation
      const newHighlight = {
        id: Date.now(),
        text: selectedText,
        color: selectedColor,
        page: pageNumber,
      };

      gsap.from(`[data-highlight="${newHighlight.id}"]`, {
        opacity: 0,
        scale: 0.95,
        duration: 0.3,
        ease: "power2.out",
      });

      setHighlights((prev) => [...prev, newHighlight]);
      saveAnnotations([...highlights, newHighlight], comments);
      selection.removeAllRanges();
    }
  };

  // Add animated toolbar component
  const Toolbar = () => (
    <div className="flex items-center gap-3 bg-white p-3 rounded-lg shadow-lg mb-4">
      <label className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg cursor-pointer hover:from-blue-600 hover:to-indigo-700 transition-all duration-300">
        <FileUp className="w-5 h-5" />
        <span>Open PDF</span>
        <input
          type="file"
          accept="application/pdf"
          onChange={handleFileChange}
          className="hidden"
        />
      </label>

      <div className="h-6 w-px bg-gray-300" />

      <div className="flex gap-2">
        {highlightColors.map((color) => (
          <button
            key={color.value}
            className="w-8 h-8 rounded-full transition-transform duration-200 hover:scale-110"
            style={{
              backgroundColor: color.value,
              transform:
                selectedColor === color.value ? "scale(1.1)" : "scale(1)",
              boxShadow:
                selectedColor === color.value
                  ? "0 0 0 2px white, 0 0 0 4px " + color.value
                  : "none",
            }}
            onClick={() => setSelectedColor(color.value)}
          />
        ))}
      </div>

      <div className="h-6 w-px bg-gray-300" />

      <button
        onClick={() => setIsHighlighting(!isHighlighting)}
        className={`px-4 py-2 rounded-lg transition-all duration-300 flex items-center gap-2 ${
          isHighlighting
            ? "bg-green-500 text-white"
            : "bg-gray-100 text-gray-700 hover:bg-gray-200"
        }`}
      >
        <PaintBucket className="w-4 h-4" />
        {isHighlighting ? "Highlighting" : "Highlight"}
      </button>

      <div className="ml-auto flex items-center gap-2">
        <button
          onClick={() => setScale((prev) => Math.max(0.5, prev - 0.1))}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <ZoomOut className="w-5 h-5" />
        </button>
        <span className="text-sm text-gray-600">
          {Math.round(scale * 100)}%
        </span>
        <button
          onClick={() => setScale((prev) => Math.min(2, prev + 0.1))}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <ZoomIn className="w-5 h-5" />
        </button>
      </div>
    </div>
  );

  // Add sidebar component with animations
  const Sidebar = () => (
    <>
      <div
        ref={overlayRef}
        className="fixed inset-0 bg-black opacity-0 hidden md:hidden"
        onClick={toggleSidebar}
      />
      <div
        ref={sidebarRef}
        className="fixed top-0 right-0 w-full md:w-[400px] h-full bg-white shadow-2xl transform transition-transform duration-300 z-50"
      >
        <div className="h-full flex flex-col">
          <div className="p-4 bg-gradient-to-r from-gray-100 to-gray-50 flex justify-between items-center">
            <h3 className="text-xl font-bold text-gray-800 flex items-center gap-2">
              <MessageSquare className="w-5 h-5" />
              Annotations
            </h3>
            <button
              onClick={toggleSidebar}
              className="p-2 hover:bg-gray-200 rounded-full transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          <div className="flex-1 overflow-y-auto p-4">
            {highlights.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <MessageSquare className="w-12 h-12 mx-auto mb-3 opacity-50" />
                <p>No annotations yet.</p>
                <p className="text-sm">
                  Start highlighting text to add annotations.
                </p>
              </div>
            ) : (
              highlights.map((highlight) => (
                <div
                  key={highlight.id}
                  className="mb-4 p-4 bg-gray-50 rounded-lg hover:shadow-md transition-shadow"
                >
                  <div className="flex justify-between items-start mb-2">
                    <div className="flex items-center gap-2">
                      <div
                        className="w-4 h-4 rounded-full"
                        style={{ backgroundColor: highlight.color }}
                      />
                      <span className="text-sm text-gray-500">
                        Page {highlight.page}
                      </span>
                    </div>
                    <button
                      className="text-gray-400 hover:text-red-500 transition-colors"
                      onClick={() => deleteHighlight(highlight.id)}
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                  <p className="text-sm mb-2 text-gray-700">{highlight.text}</p>

                  {comments
                    .filter((comment) => comment.highlightId === highlight.id)
                    .map((comment) => (
                      <div key={comment.id} className="mt-2">
                        <textarea
                          value={comment.text}
                          onChange={(e) =>
                            updateComment(comment.id, e.target.value)
                          }
                          placeholder="Add a comment..."
                          className="w-full p-3 text-sm border rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow"
                          rows={2}
                        />
                      </div>
                    ))}

                  <button
                    className="mt-2 text-sm text-blue-500 hover:text-blue-700 flex items-center gap-1 transition-colors"
                    onClick={() => addComment(highlight.id)}
                  >
                    <Plus className="w-4 h-4" /> Add Comment
                  </button>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </>
  );

  return (
    <div className="h-screen bg-gray-100 flex flex-col">
      <div className="p-4">
        <Toolbar />
      </div>

      <div className="flex-1 relative overflow-hidden">
        <div
          ref={containerRef}
          className="h-full overflow-auto pdf-container bg-gray-200 rounded-lg"
          onMouseUp={handleTextSelection}
        >
          {file && (
            <Document
              file={file}
              onLoadSuccess={({ numPages }) => setNumPages(numPages)}
              className="flex flex-col items-center p-4"
            >
              <Page
                pageNumber={pageNumber}
                scale={scale}
                className="shadow-xl"
                renderAnnotationLayer={false}
                renderTextLayer={true}
              />
            </Document>
          )}
        </div>

        {/* Page Navigation */}
        {numPages && (
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex items-center gap-4 bg-white px-4 py-2 rounded-full shadow-lg">
            <button
              onClick={() => setPageNumber((prev) => Math.max(1, prev - 1))}
              className="p-1 hover:bg-gray-100 rounded-full disabled:opacity-50"
              disabled={pageNumber <= 1}
            >
              <ChevronLeft className="w-5 h-5" />
            </button>
            <span className="text-sm">
              Page {pageNumber} of {numPages}
            </span>
            <button
              onClick={() =>
                setPageNumber((prev) => Math.min(numPages, prev + 1))
              }
              className="p-1 hover:bg-gray-100 rounded-full disabled:opacity-50"
              disabled={pageNumber >= numPages}
            >
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>
        )}

        {/* Mobile Toggle Button */}
        <button
          onClick={toggleSidebar}
          className="md:hidden fixed bottom-4 right-4 w-12 h-12 bg-blue-500 text-white rounded-full shadow-lg flex items-center justify-center hover:bg-blue-600 transition-colors"
        >
          <Menu className="w-6 h-6" />
        </button>
      </div>

      <Sidebar />
    </div>
  );
};

export default PdfAnnotator;
